

# This file was *autogenerated* from the file affine_to_projective.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_5 = Integer(5); _sage_const_12 = Integer(12); _sage_const_18 = Integer(18); _sage_const_4 = Integer(4); _sage_const_16 = Integer(16); _sage_const_6 = Integer(6); _sage_const_9 = Integer(9); _sage_const_27 = Integer(27); _sage_const_36 = Integer(36); _sage_const_8 = Integer(8); _sage_const_23 = Integer(23); _sage_const_1 = Integer(1)

def projective_sum(E, P, Q):
	Xp, Yp, Zp = P
	Xq, Yq, Zq = Q

	if P != Q:
		Xr = F((Xp*Zq - Xq*Zp)*(Zp*Zq * (Yp*Zq - Yq*Zp)**_sage_const_2  - (Xp*Zq - Xq*Zp)**_sage_const_2  * (Xp*Zq + Xq*Zp)))
		Yr = F(Zp*Zq*(Xq*Yp - Xp*Yq)*(Xp*Zq - Xq*Zp)**_sage_const_2  - (Yp*Zq - Yq*Zp)*((Yp*Zq - Yq*Zp)**_sage_const_2  * Zp*Zq - (Xp*Zq + Xq*Zp)*(Xp*Zq - Xq*Zp)**_sage_const_2 ))
		Zr = F(Zp*Zq * (Xp*Zq - Xq*Zp)**_sage_const_3 )
	else:
		a = E.a4()
		Xr = _sage_const_2 *Yp*Zp**_sage_const_5 *a**_sage_const_2  + _sage_const_12 *Xp**_sage_const_2 *Yp*Zp**_sage_const_3 *a + _sage_const_18 *Xp**_sage_const_4 *Yp*Zp - _sage_const_16 *Xp*Yp**_sage_const_3 *Zp**_sage_const_2 
		Yr = -Zp**_sage_const_6 *a**_sage_const_3  - _sage_const_9 *Xp**_sage_const_2 *Zp**_sage_const_4 *a**_sage_const_2  - _sage_const_27 *Xp**_sage_const_4 *Zp**_sage_const_2 *a + _sage_const_12 *Xp*Yp**_sage_const_2 *Zp**_sage_const_3 *a - _sage_const_27 *Xp**_sage_const_6  + _sage_const_36 *Xp**_sage_const_3 *Yp**_sage_const_2 *Zp - _sage_const_8 *Yp**_sage_const_4 *Zp**_sage_const_2 
		Zr = _sage_const_8 *Yp**_sage_const_3 *Zp**_sage_const_3 

	return (Xr/Zr, Yr/Zr)

if __name__ == "__main__":
	F = GF(_sage_const_23 )
	E = EllipticCurve(F, [_sage_const_2 , _sage_const_1 ])

	P = E((_sage_const_4 , _sage_const_2 ))
	Q = E((_sage_const_4 , _sage_const_2 ))
	R = P + Q
	print(R)

	Xp, Yp, Zp = P
	Xq, Yq, Zq = Q

	print(projective_sum(E, P, Q))


